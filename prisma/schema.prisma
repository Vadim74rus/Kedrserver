generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  email            String          @unique
  password         String
  name             String?
  avatarUrl        String?
  dateOfBirth      DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  bio              String?
  location         String?
  balance          Float           @default(0)
  balanceMining    Float           @default(0)
  percentage       Float           @default(0) // Новое поле для хранения процента майнинга
  miningPercentage Float           @default(0) // Добавьте это поле
  isPremium        Boolean         @default(false) // Добавлено поле isPremium
  posts            Post[]
  likes            Like[]
  comments         Comment[]
  followers        Follows[]       @relation("following")
  following        Follows[]       @relation("follower")
  miningSessions   MiningSession[]
  Balance          Balance[]
  sentMessages     Message[]       @relation("sender")
  receivedMessages Message[]       @relation("receiver")
}

model Follows {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String @db.ObjectId
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String @db.ObjectId

  @@index([followerId, followingId], name: "follower_following_index")
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String    @db.ObjectId
  likes     Like[]
  comments  Comment[]
  createdAt DateTime  @default(now())
}

model Like {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id])
  postId String @db.ObjectId

  @@index([userId, postId], name: "user_post_index")
}

model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  post    Post   @relation(fields: [postId], references: [id])
  postId  String @db.ObjectId

  @@index([userId, postId], name: "user_post_index")
}

model MiningSession {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  startTime   DateTime  @default(now())
  endTime     DateTime?
  speed       String // Low, Norm, Hard
  amountMined Float     @default(0)

  @@index([userId], name: "user_mining_session_index")
}

model Balance {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  amount    Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId], name: "user_balance_index")
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  sender     User     @relation("sender", fields: [senderId], references: [id])
  senderId   String   @db.ObjectId
  receiver   User     @relation("receiver", fields: [receiverId], references: [id])
  receiverId String   @db.ObjectId
  text       String
  timestamp  DateTime @default(now())

  @@index([senderId, receiverId], name: "sender_receiver_index")
}
